rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getAdminDoc() {
      return get(/databases/$(database)/documents/admins/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isSuperAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.type == 'superadmin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Admins collection
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() || (isAdmin() && request.auth.uid == adminId && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['type']));
      allow delete: if isSuperAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isSuperAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAdmin();
    }

    // Guest registrations
    match /guest/{requestId} {
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Guest log collection
    match /guest_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Maintenance requests
    match /maintenance/{requestId} {
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // System settings (superadmin only)
    match /settings/{settingId} {
      allow read: if isAdmin();
      allow write: if isSuperAdmin();
    }

    // Complaints
    match /complaints/{complaintId} {
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Sleepover requests
    match /sleepover/{requestId} {
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Finance rules
    match /payments/{paymentId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /financial_reports/{reportId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}